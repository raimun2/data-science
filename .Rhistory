# cargo librerias
pacman::p_load(tidyverse, umap, mclust, e1071)
set.seed(42)
data.umap <- read_rds("data/partidos_futbol.rds")
# cargo la data y aplico los mismos tratamientos que en el caso de DBScan
data.umap <- read_rds("data/partidos_futbol.rds") %>%
dplyr::select(where(is.numeric), -formationUsed) %>%
drop_na() %>%
umap() %>%
.$layout %>%
as.data.frame()
# exploramos graficamente la data
ggplot(data.umap) +
geom_point(aes(V1,V2))
# cargamos librerias
pacman::p_load(tidyverse, tidymodels, discrim)
set.seed(42)
# leemos data de churn (rotacion)
## Cargamos datos ----
partidos <- read_rds("data/partidos_futbol.rds") %>%
left_join(data.frame(torneo = unique(.$torneo),
categoria = factor(c("fem","fem", "fem", "fem",
"juv",
"reg", "reg", "reg",
"loc", "loc", "loc", "loc", "loc", "loc", "loc", "loc",
"fem",
"juv", "juv", "juv", "juv",
"reg", "reg", "reg",
"loc", "loc", "loc"))))
# echamos un vistazo
partidos %>% glimpse()
# dividimos data entrenamiento prueba
data_split <- initial_split(partidos, prop = 3/4)
train_data <- training(data_split)
test_data  <- testing(data_split)
nrow(test_data)
train_data %>% nrow()
modelo_basico = svm(formula = local ~ goalsConceded + accuratePass,
data = train_data,
type = 'C-classification',
kernel = 'linear')
# cargamos librerias
pacman::p_load(tidyverse, tidymodels, discrim, e1071)
modelo_basico = svm(formula = local ~ goalsConceded + accuratePass,
data = train_data,
type = 'C-classification',
kernel = 'linear')
plot(modelo_basico)
